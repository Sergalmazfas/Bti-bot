#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import requests
from flask import Flask, request

app = Flask(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Google Cloud Run
@app.route("/", methods=["POST"])
def handler():
    update = request.get_json()
    
    if not update or "message" not in update:
        return {"ok": True}
    
    chat_id = update["message"]["chat"]["id"]
    text = update["message"].get("text", "")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if text == "/start":
        send_message(chat_id, "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BTI Bot!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–¢–ò.")
        return {"ok": True}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if not validate_cadastral(text):
        send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00:0000000:0000")
        return {"ok": True}
    
    try:
        # –ó–∞–ø—Ä–æ—Å –≤ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä (–ø—Ä–∏–º–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
        data = get_cadastral_data(text)
        send_message(chat_id, format_response(data))
    except Exception as e:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
    
    return {"ok": True}

@app.route("/health", methods=["GET"])
def health():
    return {"status": "ok"}

def validate_cadastral(number: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    if not number or ":" not in number:
        return False
    
    parts = number.split(":")
    if len(parts) != 4:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ü–∏—Ñ—Ä
    for part in parts:
        if not part.isdigit():
            return False
    
    return True

def get_cadastral_data(number: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞"""
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
        "address": f"–ê–¥—Ä–µ—Å –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É {number}",
        "area": "50.5 –∫–≤.–º",
        "cost": "15,000 —Ä—É–±",
        "cadastral_number": number
    }

def format_response(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    address = data.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    area = data.get("area", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    cost = data.get("cost", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    return f"""üè† **–ê–¥—Ä–µ—Å:** {address}
üìê **–ü–ª–æ—â–∞–¥—å:** {area}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ë–¢–ò:** {cost}

üìû –î–ª—è –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∏—Ç–µ: +7 (495) 123-45-67"""

def send_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"{API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
