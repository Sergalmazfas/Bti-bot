import os
import json
import logging
import asyncio
import threading
import re
import requests
import statistics
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ event loop
application = None
_background_loop = None
_loop_thread = None

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã CRPTI (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞)
CRPTI_COEFFICIENTS = {
    'coefficient_measurements': 50,  # —Ä—É–±/–º¬≤ –¥–ª—è –æ–±–º–µ—Ä–æ–≤
    'coefficient_tech': 750,  # —Ä—É–±/–º¬≤ –¥–ª—è —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ + —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—è
    'last_updated': '2025-09-24'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

def generate_commercial_proposal(object_data: dict, pricing_cards: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        prompt = f"""–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —É—Å–ª—É–≥–∏ –ë–¢–ò: –æ–±–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

–°–æ—Å—Ç–∞–≤—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

–î–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–µ:
- –ê–¥—Ä–µ—Å: {object_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
- –ü–ª–æ—â–∞–¥—å: {object_data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤
- –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {object_data.get('build_year', '–ù–µ —É–∫–∞–∑–∞–Ω')}
- –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω: {object_data.get('materials', '–ù–µ —É–∫–∞–∑–∞–Ω')}
- –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è: {object_data.get('room_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}

–ö–∞—Ä—Ç–æ—á–∫–∏ —Ü–µ–Ω:
- –ö–∞—Ä—Ç–æ—á–∫–∞ 1 (–ë–¢–ò): {pricing_cards.get('bti_total', 0):,.0f} —Ä—É–±.
  ‚Ä¢ –û–±–º–µ—Ä—ã: {pricing_cards.get('bti_measurements', 0):,.0f} —Ä—É–±.
  ‚Ä¢ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç + –∑–∞–¥–∞–Ω–∏–µ: {pricing_cards.get('bti_tech', 0):,.0f} —Ä—É–±.
- –ö–∞—Ä—Ç–æ—á–∫–∞ 2 (–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã): {pricing_cards.get('competitor_price', 0):,.0f} —Ä—É–±.
- –ö–∞—Ä—Ç–æ—á–∫–∞ 3 (–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è): {pricing_cards.get('recommended_price', 0):,.0f} —Ä—É–±.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É:
- –°—Ç–∏–ª—å: –¥–µ–ª–æ–≤–æ–π, –º–∞–∫—Å–∏–º—É–º 6‚Äì7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
- –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è (–ö–∞—Ä—Ç–æ—á–∫–∞ 3).
- –ò—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω—ã –ë–¢–ò –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
- –°–¥–µ–ª–∞–π —É–ø–æ—Ä –Ω–∞ —Ç–æ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —É—Å–ª—É–≥ –ë–¢–ò (–æ–±–º–µ—Ä—ã, –ø–∞—Å–ø–æ—Ä—Ç, –∑–∞–¥–∞–Ω–∏–µ).
- –ó–∞–≤–µ—Ä—à–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É.

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

        # –í—ã–∑–æ–≤ OpenAI API (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —É—Å–ª—É–≥ –ë–¢–ò."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        if response.choices:
            return response.choices[0].message.content.strip()
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return f"ü§ù **–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï** –ø–æ –æ–±—ä–µ–∫—Ç—É {object_data.get('area', 0)} –º¬≤\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥ –ë–¢–ò: –æ–±–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ **{pricing_cards.get('recommended_price', 0):,.0f} —Ä—É–±.**\n\n–î–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ë–¢–ò, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ. –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Å–∂–∞—Ç—ã–µ —Å—Ä–æ–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞.\n\nüìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!"


def _start_background_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π asyncio event loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
    global _background_loop
    _background_loop = asyncio.new_event_loop()

    def run_loop_forever():
        asyncio.set_event_loop(_background_loop)
        _background_loop.run_forever()

    global _loop_thread
    _loop_thread = threading.Thread(target=run_loop_forever, name="bot-event-loop", daemon=True)
    _loop_thread.start()
    logger.info("Background asyncio loop started")


def _run_coro(coro):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º loop –∏ –∂–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    if _background_loop is None:
        raise RuntimeError("Background loop is not started")
    future = asyncio.run_coroutine_threadsafe(coro, _background_loop)
    return future.result()


def fetch_reestr_data(query: str, search_type: str = "cadastral") -> dict:
    """–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ì–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        reestr_token = os.getenv('REESTR_API_TOKEN')
        if not reestr_token:
            logger.error("REESTR_API_TOKEN not found")
            return {}
        
        if search_type == "cadastral":
            url = f"https://reestr-api.ru/v1/search/cadastrFull?auth_token={reestr_token}"
            data = {"cad_num": query}
        else:
            url = f"https://reestr-api.ru/v1/search/address?auth_token={reestr_token}"
            data = {"address": query}
        
        response = requests.post(url, data=data, timeout=15)
        
        if response.status_code == 404 and search_type == "cadastral":
            # Fallback –Ω–∞ –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä—É
            fallback_url = f"https://reestr-api.ru/v1/search/cadastr?auth_token={reestr_token}"
            response = requests.post(fallback_url, data={"cad_num": query}, timeout=15)
            if response.status_code != 200:
                logger.warning(f"Reestr fallback HTTP {response.status_code}")
                return {}
        elif response.status_code != 200:
            logger.warning(f"Reestr HTTP {response.status_code}")
            return {}
        
        api_json = response.json()
        
    except Exception as e:
        logger.error(f"Reestr error: {e}")
        return {}

    try:
        items = api_json.get("list") or []
        if not items and isinstance(api_json, dict):
            items = [api_json] if api_json else []
        if not items:
            return {}
        item = items[0]

        # –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        address = item.get("address") or item.get("full_address")
        cad_num = item.get("cad_num") or item.get("cadastral_number") or (query if search_type == "cadastral" else None)
        area_raw = item.get("area")
        unit = item.get("unit")

        # –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        build_year = None
        for year_key in ("construction_end", "exploitation_start"):
            y = item.get(year_key)
            if isinstance(y, int):
                build_year = y
                break
            if isinstance(y, str):
                y_digits = re.findall(r"(19\d{2}|20\d{2})", y)
                if y_digits:
                    build_year = int(y_digits[0])
                    break
        if build_year is None:
            reg_date = item.get("reg_date") or item.get("update_date")
            if isinstance(reg_date, str):
                parts = re.findall(r"(19\d{2}|20\d{2})", reg_date)
                if parts:
                    build_year = int(parts[-1])

        # –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
        room_type_raw = item.get("oks_purpose") or item.get("oks_type_more") or item.get("obj_type") or item.get("oks_type")
        room_type = None
        if isinstance(room_type_raw, str):
            lt = room_type_raw.lower()
            if any(k in lt for k in ["–Ω–µ–∂–∏–ª", "—Ç–æ—Ä–≥–æ–≤", "–æ—Ñ–∏—Å", "—Å–∫–ª–∞–¥"]):
                room_type = "–ù–µ–∂–∏–ª–æ–µ"
            elif any(k in lt for k in ["–∂–∏–ª", "–∫–≤–∞—Ä—Ç–∏—Ä", "–¥–æ–º"]):
                room_type = "–ñ–∏–ª–æ–µ"
        room_type = room_type or room_type_raw or "–î—Ä—É–≥–æ–µ"

        # –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω
        materials = item.get("walls_material") or item.get("walls")
        if isinstance(materials, str):
            materials = materials.strip()

        # –ü–∞—Ä—Å–∏–º –ø–ª–æ—â–∞–¥—å
        area = None
        if isinstance(area_raw, (int, float)):
            area = float(area_raw)
        elif isinstance(area_raw, str):
            normalized = area_raw.replace(" ", "").replace(",", ".")
            try:
                area = float(normalized)
            except Exception:
                area = None
        if unit and isinstance(unit, str) and "–º" not in unit and "–∫–≤" not in unit:
            area = area if area and area > 0 else None

        return {
            "address": address,
            "cadastral_number": cad_num,
            "area": area,
            "build_year": build_year,
            "materials": materials,
            "room_type": room_type
        }
    except Exception as e:
        logger.error(f"Reestr parse error: {e}")
        return {}

def search_competitor_prices(address: str, area: float) -> list:
    """–®–∞–≥ 3: –ü–æ–∏—Å–∫ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SERP API (—É–ª—É—á—à–µ–Ω–Ω—ã–π)"""
    try:
        serpriver_key = os.getenv('SERPRIVER_API_KEY')
        if not serpriver_key:
            logger.warning("SERPRIVER_API_KEY not found, using default prices")
            return [120, 150, 180, 200, 250]  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
        queries = [
            f"–ë–¢–ò —É—Å–ª—É–≥–∏ –æ–±–º–µ—Ä—ã {address} —Ü–µ–Ω–∞ –∑–∞ –º¬≤",
            f"—Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç –ë–¢–ò {address} —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            f"–æ–±–º–µ—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ {address} —Ü–µ–Ω–∞",
            f"–ë–¢–ò –∑–∞–º–µ—Ä—ã {int(area)} –º¬≤ —Ü–µ–Ω–∞",
            f"–æ–±–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π {address} —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            f"—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç –ë–¢–ò {address} —Ü–µ–Ω–∞",
            f"–∑–∞–º–µ—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ {address} —Å—Ç–æ–∏–º–æ—Å—Ç—å –º¬≤"
        ]
        
        all_prices = []
        
        for query in queries:
            try:
                base_url = "https://serpriver.ru/api/search.php"
                params = {
                    "api_key": serpriver_key,
                    "system": "google",
                    "domain": "ru",
                    "query": query,
                    "result_cnt": 15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    "lr": 213  # –ú–æ—Å–∫–≤–∞
                }
                
                response = requests.get(base_url, params=params, timeout=15)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('json', {}).get('res'):
                        results = data['json']['res']
                        prices = parse_competitor_prices(results)
                        all_prices.extend(prices)
                        logger.info(f"Found {len(prices)} prices for query: {query}")
            except Exception as e:
                logger.warning(f"Error searching competitors for query '{query}': {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if not all_prices:
            logger.warning("No competitor prices found, using defaults")
            all_prices = [120, 150, 180, 200, 250]
        
        logger.info(f"Total competitor prices found: {len(all_prices)} - {all_prices}")
        return all_prices
        
    except Exception as e:
        logger.error(f"Error in search_competitor_prices: {e}")
        return [120, 150, 180, 200, 250]  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã

def parse_competitor_prices(results: list) -> list:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    prices = []
    
    for result in results:
        snippet = result.get('snippet', '').lower()
        title = result.get('title', '').lower()
        full_text = f"{title} {snippet}"
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
        price_patterns = [
            r'(\d+)\s*—Ä—É–±[./]?\s*–º[¬≤2]',
            r'(\d+)\s*—Ä—É–±[./]?\s*–∫–≤[./]?–º',
            r'(\d+)\s*—Ä—É–±[./]?\s*–∑–∞\s*–º[¬≤2]',
            r'–æ—Ç\s*(\d+)\s*—Ä—É–±',
            r'(\d+)\s*—Ä—É–±[./]?\s*–º¬≤',
            r'(\d+)\s*—Ä—É–±[./]?\s*–∑–∞\s*–∫–≤[./]?–º',
            r'—Å—Ç–æ–∏–º–æ—Å—Ç—å[:\s]*(\d+)\s*—Ä—É–±',
            r'—Ü–µ–Ω–∞[:\s]*(\d+)\s*—Ä—É–±',
            r'(\d+)\s*—Ä—É–±[./]?\s*–∑–∞\s*–º¬≤',
            r'–æ—Ç\s*(\d+)\s*—Ä—É–±[./]?\s*–º¬≤'
        ]
        
        for pattern in price_patterns:
            matches = re.findall(pattern, full_text)
            for match in matches:
                try:
                    price = int(match)
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ë–¢–ò —É—Å–ª—É–≥
                    if 50 <= price <= 800:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ë–¢–ò
                        prices.append(price)
                        logger.debug(f"Found price: {price} in text: {full_text[:100]}...")
                except ValueError:
                    continue
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    unique_prices = list(set(prices))
    unique_prices.sort()
    
    logger.info(f"Parsed prices: {unique_prices}")
    return unique_prices

def calculate_bti_prices(area: float) -> dict:
    """–®–∞–≥ 2: –†–∞—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ë–¢–ò"""
    measurements_price = area * CRPTI_COEFFICIENTS['coefficient_measurements']
    tech_price = area * CRPTI_COEFFICIENTS['coefficient_tech']
    total_price = measurements_price + tech_price
    
    return {
        "measurements": round(measurements_price, 2),
        "techpassport_task": round(tech_price, 2),
        "total": round(total_price, 2)
    }

def calculate_competitor_prices(competitor_prices: list) -> dict:
    """–®–∞–≥ 3: –†–∞—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)"""
    if not competitor_prices:
        logger.warning("No competitor prices, using default")
        median_price = 150  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞
    else:
        median_price = statistics.median(competitor_prices)
        logger.info(f"Competitor prices: {competitor_prices}, median: {median_price}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ù–î–° (22%) –∏ –ø—Ä–∏–±—ã–ª—å (10%) = 1.22 * 1.10 = 1.342
    final_price = median_price * 1.342
    
    return {
        "median_price": round(median_price, 2),
        "price": round(final_price, 2),
        "raw_prices": competitor_prices
    }

def calculate_recommended_price(bti_total: float, competitor_price: float) -> dict:
    """–®–∞–≥ 4: –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ –º–µ–∂–¥—É –ë–¢–ò –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
    recommended = (bti_total + competitor_price) / 2
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –ë–¢–ò, –Ω–æ –Ω–µ –≤—ã—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    recommended = max(bti_total * 1.05, min(recommended, competitor_price * 0.95))
    
    return {
        "price": round(recommended, 2)
    }


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    user_data[user_id] = {
        'step': 'waiting_cadastral',
        'cadastral_number': None,
        'address': None,
        'area': None,
        'build_year': None,
        'materials': None,
        'room_type': None,
        'message_id': None,
        'pricing_data': None  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
    }
    
    await update.message.reply_text(
        "üè† –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–¢–ò —Å —Ç—Ä–µ–º—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Ü–µ–Ω.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 77:09:0001013:1087)."
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    logger.info(f"Message from {user_id}: '{text}'")
    
    if user_id not in user_data:
        user_data[user_id] = {
            'step': 'waiting_cadastral',
            'cadastral_number': None,
            'address': None,
            'area': None,
            'build_year': None,
            'materials': None,
            'room_type': None,
            'message_id': None,
            'pricing_data': None
        }
    
    current_step = user_data[user_id].get('step', 'waiting_cadastral')
    
    if current_step == 'waiting_cadastral':
        if re.match(r'^\d{1,3}:\d{1,3}:\d{1,10}:\d{1,6}$', text):
            logger.info(f"üî¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {text}")
            await update.message.reply_text(f"üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä—É {text} –≤ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ...")
            
            try:
                # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                reestr_data = fetch_reestr_data(text, "cadastral")
                logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞: {reestr_data}")
                
                if not reestr_data or not reestr_data.get('address'):
                    await update.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä.")
                    return
                
                if not reestr_data.get('area'):
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞.")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                user_data[user_id].update({
                    'cadastral_number': text,
                    'address': reestr_data.get('address'),
                    'area': reestr_data.get('area'),
                    'build_year': reestr_data.get('build_year'),
                    'materials': reestr_data.get('materials'),
                    'room_type': reestr_data.get('room_type')
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                message = f"""‚úÖ **–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞:**

üìç **–ê–¥—Ä–µ—Å:** {reestr_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìê **–ü–ª–æ—â–∞–¥—å:** {reestr_data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤
üìÖ **–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:** {reestr_data.get('build_year', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üß± **–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:** {reestr_data.get('materials', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ **–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:** {reestr_data.get('room_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}

**–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?**"""
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data="verify_yes")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="verify_no")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                sent_message = await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
                user_data[user_id]['message_id'] = sent_message.message_id
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùì –í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    else:
        await update.message.reply_text("‚ùì –í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "verify_yes":
        await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ü–µ–Ω...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            area = user_data[user_id].get('area')
            address = user_data[user_id].get('address')
            build_year = user_data[user_id].get('build_year')
            materials = user_data[user_id].get('materials')
            room_type = user_data[user_id].get('room_type')
            
            if not area:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞.")
                return
            
            # –®–∞–≥ 2: –†–∞—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ë–¢–ò
            bti_prices = calculate_bti_prices(area)
            
            # –®–∞–≥ 3: –ü–æ–∏—Å–∫ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            competitor_prices_list = search_competitor_prices(address or "–ú–æ—Å–∫–≤–∞", area)
            competitor_prices = calculate_competitor_prices(competitor_prices_list)
            
            # –®–∞–≥ 4: –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
            recommended_prices = calculate_recommended_price(
                bti_prices['total'], 
                competitor_prices['price']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            user_data[user_id]['pricing_data'] = {
                'bti_total': bti_prices['total'],
                'bti_measurements': bti_prices['measurements'],
                'bti_tech': bti_prices['techpassport_task'],
                'competitor_price': competitor_prices['price'],
                'recommended_price': recommended_prices['price'],
                'area': area
            }
            
            # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            message = f"""üìä **–¢–†–ò –ö–ê–†–¢–û–ß–ö–ò –¶–ï–ù** –¥–ª—è {area} –º¬≤ ({room_type}, {materials}, {build_year} –≥.):

ÔøΩÔøΩÔ∏è **–ö–ê–†–¢–û–ß–ö–ê 1: –ë–¢–ò (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã)**
‚Ä¢ –û–±–º–µ—Ä—ã: {bti_prices['measurements']:,.0f} —Ä—É–±.
‚Ä¢ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç + –∑–∞–¥–∞–Ω–∏–µ: {bti_prices['techpassport_task']:,.0f} —Ä—É–±.
‚Ä¢ **–ò—Ç–æ–≥–æ –ë–¢–ò: {bti_prices['total']:,.0f} —Ä—É–±.**

üè¢ **–ö–ê–†–¢–û–ß–ö–ê 2: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (—Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã)**
‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {statistics.median(competitor_prices_list) if competitor_prices_list else 150:,.0f} —Ä—É–±/–º¬≤
‚Ä¢ –° –ù–î–° –∏ –ø—Ä–∏–±—ã–ª—å—é: **{competitor_prices['price']:,.0f} —Ä—É–±.**

‚≠ê **–ö–ê–†–¢–û–ß–ö–ê 3: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞**
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: **{recommended_prices['price']:,.0f} —Ä—É–±.**

**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã CRPTI (–æ–±–Ω–æ–≤–ª–µ–Ω—ã {CRPTI_COEFFICIENTS['last_updated']}):**
‚Ä¢ –û–±–º–µ—Ä—ã: {CRPTI_COEFFICIENTS['coefficient_measurements']} —Ä—É–±/–º¬≤
‚Ä¢ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç: {CRPTI_COEFFICIENTS['coefficient_tech']} —Ä—É–±/–º¬≤"""
            
            keyboard = [
                [InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å PDF", callback_data="download_pdf")],
                [InlineKeyboardButton("üìù –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="generate_proposal")],
                [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="order_service")],
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="new_calculation")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    elif data == "verify_no":
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ.")
        user_data[user_id]['step'] = 'waiting_cadastral'
    
    elif data == "download_pdf":
        await query.edit_message_text("üìÑ PDF –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    
    elif data == "generate_proposal":
        await query.edit_message_text("ÔøΩÔøΩ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–µ
            object_data = {
                'address': user_data[user_id].get('address'),
                'area': user_data[user_id].get('area'),
                'build_year': user_data[user_id].get('build_year'),
                'materials': user_data[user_id].get('materials'),
                'room_type': user_data[user_id].get('room_type')
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
            pricing_cards = user_data[user_id].get('pricing_data', {})
            
            if not pricing_cards:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç.")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT
            proposal = generate_commercial_proposal(object_data, pricing_cards)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="new_calculation")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù **–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï**\n\n{proposal}",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif data == "order_service" or data == "contact_manager":
        await query.edit_message_text("üìû –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.")
    
    elif data == "new_calculation":
        await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
        user_data[user_id]['step'] = 'waiting_cadastral'


def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ event loop."""
    global application
    if _background_loop is None:
        _start_background_loop()
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN not found in environment variables")
        return False
    
    try:
        application = Application.builder().token(bot_token).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        application.add_error_handler(error_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PTB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–æ–Ω–µ loop'–∞
        if not getattr(application, "_initialized", False):
            _run_coro(application.initialize())
        if not getattr(application, "_running", False):
            _run_coro(application.start())
        logger.info("Bot initialized and started on background loop")
        return True
    except Exception as e:
        logger.error(f"Error initializing bot: {e}")
        return False

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({'status': 'OK', 'message': 'Bot is running'})

@app.route('/', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram"""
    try:
        if application is None or _background_loop is None:
            if not initialize_bot():
                return jsonify({'error': 'Failed to initialize bot'}), 500
        
        update_data = request.get_json()
        if not update_data:
            return jsonify({'error': 'No JSON data'}), 400
        
        if 'update_id' not in update_data:
            logger.warning("No update_id in webhook data")
            return jsonify({'status': 'OK'})
        
        try:
            update = Update.de_json(update_data, application.bot)
            if update:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º loop
                _run_coro(application.process_update(update))
                logger.info("Update processed successfully")
            return jsonify({'status': 'OK'})
        except Exception as e:
            logger.error(f"Error processing webhook: {e}")
            return jsonify({'error': f'Error processing webhook: {str(e)}'}), 500
            
    except Exception as e:
        logger.error(f"Error in webhook: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)


def handler(event, context):
    """
    Yandex Cloud Function compatible handler for app.py compatibility
    """
    try:
        # Parse the event body
        body = event.get('body', '')
        if not body:
            return {'statusCode': 400, 'body': 'No body provided'}
        
        # Parse JSON from body
        try:
            update_data = json.loads(body)
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            return {'statusCode': 400, 'body': 'Invalid JSON'}
        
        # Process the update using our existing webhook logic
        if application is None or _background_loop is None:
            if not initialize_bot():
                return {'statusCode': 500, 'body': 'Failed to initialize bot'}
        
        if 'update_id' not in update_data:
            logger.warning("No update_id in webhook data")
            return {'statusCode': 200, 'body': 'OK'}
        
        try:
            update = Update.de_json(update_data, application.bot)
            if update:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º loop
                _run_coro(application.process_update(update))
                logger.info("Update processed successfully")
            return {'statusCode': 200, 'body': 'OK'}
        except Exception as e:
            logger.error(f"Error processing webhook: {e}")
            return {'statusCode': 500, 'body': f'Error processing webhook: {str(e)}'}
            
    except Exception as e:
        logger.error(f"Error in handler: {e}")
        return {'statusCode': 500, 'body': str(e)}
