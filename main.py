#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import sqlite3
import re
import requests
import json
import time
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8430779813:AAGLaNzplbp9v0ySUi-FxTm1ajEREQYiJ5o"
ADMIN_IDS = [5265534096]
SERPRIVER_API_KEY = "S4CV0-4XX9A-8WVE2-XD7E9-X704Z"

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

class EnhancedDatabase:
    def __init__(self, db_path="zamerprobti.db"):
        self.db_path = db_path
        self.init_db()
        self.init_coefficients()
        self.init_competitors()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS measurements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                address TEXT,
                room_type TEXT,
                area REAL,
                build_year INTEGER,
                materials TEXT,
                cadastral_number TEXT,
                market_price REAL,
                serp_data TEXT,
                search_type TEXT,
                bti_cost REAL,
                c_base REAL,
                c_base_source TEXT,
                c_base_note TEXT,
                year_source TEXT,
                s_itog REAL,
                k_region REAL,
                k_iznos REAL,
                k_nazn REAL,
                k_dop REAL,
                total_coefficient REAL,
                price_online REAL,
                price_plan REAL,
                price_on_site REAL,
                price_full_package REAL,
                competitor_median REAL,
                competitor_delta_percent REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS coefficients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                region TEXT,
                c_base REAL,
                k_region REAL,
                k_iznos_min REAL,
                k_iznos_max REAL,
                k_nazn REAL,
                k_dop REAL,
                source TEXT,
                last_updated TIMESTAMP,
                note TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS competitor_list (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                domains TEXT,
                selectors TEXT,
                is_active BOOLEAN DEFAULT 1
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS competitor_prices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                competitor TEXT,
                region TEXT,
                service_type TEXT,
                price REAL,
                currency TEXT,
                url TEXT,
                last_checked TIMESTAMP,
                reliability_score REAL
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pricing_strategies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                strategy_name TEXT,
                service_type TEXT,
                target_margin REAL,
                min_price REAL,
                max_price REAL,
                is_active BOOLEAN DEFAULT 1
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def init_coefficients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ú–æ—Å–∫–≤—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM coefficients WHERE region = 'Moscow'")
        if cursor.fetchone()[0] == 0:
            cursor.execute('''
                INSERT INTO coefficients (region, c_base, k_region, k_iznos_min, k_iznos_max, k_nazn, k_dop, source, last_updated, note)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                'Moscow', 1500.0, 1.0, 0.5, 1.1, 1.0, 1.0,
                'coefficients_db_v2025-09-22', datetime.now().isoformat(),
                'Default coefficients for Moscow region'
            ))
        
        conn.commit()
        conn.close()
    
    def init_competitors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        competitors = [
            ('BTE', 'bte.ru', '{"online": ".price-online", "plan": ".price-plan", "on_site": ".price-on-site", "full": ".price-full"}', 1),
            ('CompA', 'comp-a.ru', '{"online": ".price", "plan": ".price", "on_site": ".price", "full": ".price"}', 1),
            ('CompB', 'comp-b.ru', '{"online": ".price", "plan": ".price", "on_site": ".price", "full": ".price"}', 1),
            ('CompC', 'comp-c.ru', '{"online": ".price", "plan": ".price", "on_site": ".price", "full": ".price"}', 1)
        ]
        
        for name, domains, selectors, is_active in competitors:
            cursor.execute('''
                INSERT OR IGNORE INTO competitor_list (name, domains, selectors, is_active)
                VALUES (?, ?, ?, ?)
            ''', (name, domains, selectors, is_active))
        
        conn.commit()
        conn.close()
    
    def get_coefficients(self, region="Moscow"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT c_base, k_region, k_iznos_min, k_iznos_max, k_nazn, k_dop, source, last_updated, note
            FROM coefficients WHERE region = ?
        ''', (region,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'c_base': result[0],
                'k_region': result[1],
                'k_iznos_min': result[2],
                'k_iznos_max': result[3],
                'k_nazn': result[4],
                'k_dop': result[5],
                'source': result[6],
                'last_updated': result[7],
                'note': result[8]
            }
        return None
    
    def add_measurement(self, user_id, address, room_type, area, build_year, materials, 
                       cadastral_number=None, market_price=None, serp_data=None, search_type=None,
                       bti_cost=None, c_base=None, c_base_source=None, c_base_note=None,
                       year_source=None, s_itog=None, k_region=None, k_iznos=None, k_nazn=None,
                       k_dop=None, total_coefficient=None, price_online=None, price_plan=None,
                       price_on_site=None, price_full_package=None, competitor_median=None,
                       competitor_delta_percent=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO measurements (
                user_id, address, room_type, area, build_year, materials,
                cadastral_number, market_price, serp_data, search_type,
                bti_cost, c_base, c_base_source, c_base_note, year_source,
                s_itog, k_region, k_iznos, k_nazn, k_dop, total_coefficient,
                price_online, price_plan, price_on_site, price_full_package,
                competitor_median, competitor_delta_percent
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id, address, room_type, area, build_year, materials,
            cadastral_number, market_price, serp_data, search_type,
            bti_cost, c_base, c_base_source, c_base_note, year_source,
            s_itog, k_region, k_iznos, k_nazn, k_dop, total_coefficient,
            price_online, price_plan, price_on_site, price_full_package,
            competitor_median, competitor_delta_percent
        ))
        
        conn.commit()
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = EnhancedDatabase()

def search_cadastre_data(query, search_type="cadastral"):
    """–ü–æ–∏—Å–∫ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SerpRiver API"""
    api_url = "https://serpriver.ru/api/search.php"
    
    if search_type == "cadastral":
        search_query = query
    else:
        search_query = f"{query} –∫–∞–¥–∞—Å—Ç—Ä"
    
    payload = {
        "api_key": SERPRIVER_API_KEY,
        "system": "yandex",
        "domain": "ru",
        "query": search_query,
        "result_cnt": 3,
        "lr": 213  # –ú–æ—Å–∫–≤–∞
    }
    
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {query} (—Ç–∏–ø: {search_type})")
        logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SerpRiver API...")
        
        response = requests.post(api_url, data=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {data}")
        
        if data.get('search_metadata', {}).get('status') == 'error':
            error_desc = data.get('search_metadata', {}).get('error_description', 'Unknown error')
            logger.warning(f"‚ö†Ô∏è API –æ—à–∏–±–∫–∞: {error_desc}")
            
            if "maximum bid settings" in error_desc:
                logger.info("‚Ü™Ô∏è Fallback –Ω–∞ Google (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)")
                # Fallback –Ω–∞ Google —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                payload_google = payload.copy()
                payload_google["system"] = "google"
                payload_google["result_cnt"] = 2
                
                response_google = requests.post(api_url, data=payload_google, timeout=30)
                response_google.raise_for_status()
                data = response_google.json()
                logger.info(f"üìä –û—Ç–≤–µ—Ç Google: {data}")
        
        return data
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return None

def extract_cad_info(snippet):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–Ω–∏–ø–ø–µ—Ç–∞"""
    info = {}
    
    # –ü–ª–æ—â–∞–¥—å - —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    area_patterns = [
        r'(\d{1,3}(?:\s\d{3})*(?:,\d+)?)\s*–∫–≤\.?–º',
        r'(\d+(?:,\d+)?)\s*–º¬≤',
        r'(\d+(?:,\d+)?)\s*–∫–≤\.?–º'
    ]
    
    for pattern in area_patterns:
        match = re.search(pattern, snippet, re.IGNORECASE)
        if match:
            area_str = match.group(1).replace(' ', '').replace(',', '.')
            try:
                info['area'] = float(area_str)
                break
            except ValueError:
                continue
    
    # –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    year_match = re.search(r'(\d{4})\s*–≥\.?', snippet)
    if year_match:
        try:
            info['year'] = int(year_match.group(1))
        except ValueError:
            pass
    
    # –¶–µ–Ω–∞
    price_patterns = [
        r'(\d{1,3}(?:\s\d{3})*(?:,\d+)?)\s*—Ä—É–±',
        r'(\d+(?:,\d+)?)\s*–º–ª–Ω\s*—Ä—É–±'
    ]
    
    for pattern in price_patterns:
        match = re.search(pattern, snippet, re.IGNORECASE)
        if match:
            price_str = match.group(1).replace(' ', '').replace(',', '.')
            try:
                price = float(price_str)
                if '–º–ª–Ω' in snippet.lower():
                    price *= 1000000
                info['price'] = price
                break
            except ValueError:
                continue
    
    return info

def calculate_s_itog(area, room_type="–¥—Ä—É–≥–æ–µ"):
    """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —É—á–µ—Ç–Ω–æ–π –ø–ª–æ—â–∞–¥–∏"""
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–ª–æ—â–∞–¥—å
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –±–∞–ª–∫–æ–Ω–∞–º–∏, –ª–æ–¥–∂–∏—è–º–∏ –∏ —Ç.–¥.
    return area

def calculate_bti_cost(area, build_year, materials, room_type="–¥—Ä—É–≥–æ–µ", is_urgent=False):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–¢–ò —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã
    coeffs = db.get_coefficients("Moscow")
    if not coeffs:
        logger.error("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return None
    
    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∏
    s_itog = calculate_s_itog(area, room_type)
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    c_base = coeffs['c_base']
    k_region = coeffs['k_region']
    k_nazn = coeffs['k_nazn']
    k_dop = coeffs['k_dop']
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ –ø–ª–æ—â–∞–¥–∏ (—Å–∫–∏–¥–∫–∞ –∑–∞ –æ–±—ä–µ–º)
    if s_itog < 500:
        k_area = 1.0
        area_detail = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
    elif s_itog < 2500:
        k_area = 0.95
        area_detail = "–°–∫–∏–¥–∫–∞ –∑–∞ –æ–±—ä–µ–º: -5%"
    else:
        k_area = 0.85
        area_detail = "–°–∫–∏–¥–∫–∞ –∑–∞ –æ–±—ä–µ–º: -15%"
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    if build_year < 1980:
        k_iznos = 1.1
        year_detail = "–°—Ç–∞—Ä—ã–π —Ñ–æ–Ω–¥: +10%"
    elif build_year < 2000:
        k_iznos = 1.0
        year_detail = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
    else:
        k_iznos = 0.95
        year_detail = "–ù–æ–≤—ã–π —Ñ–æ–Ω–¥: -5%"
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
    material_coeffs = {
        '–∫–∏—Ä–ø–∏—á': 1.05,
        '–±–µ—Ç–æ–Ω': 1.05,
        '–º–æ–Ω–æ–ª–∏—Ç': 1.0,
        '–¥–µ—Ä–µ–≤–æ': 1.15
    }
    k_material = material_coeffs.get(materials.lower(), 1.0)
    material_detail = f"–ú–∞—Ç–µ—Ä–∏–∞–ª {materials}: {k_material:.0%}"
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    k_urgent = 1.2 if is_urgent else 1.0
    urgent_detail = "–≠–∫—Å–ø—Ä–µ—Å—Å: +20%" if is_urgent else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫"
    
    # –û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    total_coeff = k_area * k_iznos * k_material * k_urgent * k_region * k_nazn * k_dop
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    c_bti = s_itog * c_base * total_coeff
    
    return {
        'c_bti': c_bti,
        's_itog': s_itog,
        'c_base': c_base,
        'c_base_source': coeffs['source'],
        'c_base_note': coeffs['note'],
        'k_area': k_area,
        'k_iznos': k_iznos,
        'k_material': k_material,
        'k_urgent': k_urgent,
        'k_region': k_region,
        'k_nazn': k_nazn,
        'k_dop': k_dop,
        'total_coeff': total_coeff,
        'area_detail': area_detail,
        'year_detail': year_detail,
        'material_detail': material_detail,
        'urgent_detail': urgent_detail
    }

def calculate_package_prices(c_bti, region="Moscow"):
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω –ø–æ –ø–∞–∫–µ—Ç–∞–º —É—Å–ª—É–≥"""
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è –ú–æ—Å–∫–≤—ã
    if region == "Moscow":
        plan_fee = 1500
        on_site_fee = 4500
        notary_fee = 2000
        admin_fee = 1000
    else:
        plan_fee = 1000
        on_site_fee = 3000
        notary_fee = 1500
        admin_fee = 500
    
    prices = {
        'online': max(c_bti * 1.0, 299),  # –ú–∏–Ω–∏–º—É–º 299 —Ä—É–±
        'plan': c_bti + plan_fee,
        'on_site': c_bti + on_site_fee,
        'full_package': c_bti + plan_fee + on_site_fee + notary_fee + admin_fee
    }
    
    return prices

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìè –ë–¢–ò —Ä–∞—Å—á—ë—Ç", callback_data="order_measurement")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–¢–ò!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ "
        "—Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def order_measurement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üî¢ –ü–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É", callback_data="search_cadastral")],
        [InlineKeyboardButton("üìç –ü–æ –∞–¥—Ä–µ—Å—É", callback_data="search_address")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞:",
        reply_markup=reply_markup
    )

async def process_search_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user_data[user_id] = {'step': 'waiting_cadastral' if query.data == 'search_cadastral' else 'waiting_address'}
    
    if query.data == 'search_cadastral':
        await query.edit_message_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 77:09:0001013:1087"
        )
    else:
        await query.edit_message_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: —É–ª. –§–µ—Å—Ç–∏–≤–∞–ª—å–Ω–∞—è, –¥. 28, —Å—Ç—Ä. 1, –ú–æ—Å–∫–≤–∞"
        )

async def process_cadastral_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    user_id = update.effective_user.id
    cadastral_number = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if not re.match(r'\d{2}:\d{2}:\d{7}:\d{4}', cadastral_number):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞.\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: XX:XX:XXXXXXX:XXXX\n"
            "–ü—Ä–∏–º–µ—Ä: 77:09:0001013:1087"
        )
        return
    
    user_data[user_id]['cadastral_number'] = cadastral_number
    user_data[user_id]['search_type'] = 'cadastral'
    
    # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    await update.message.reply_text("üîç –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É...")
    
    api_data = search_cadastre_data(cadastral_number, "cadastral")
    
    if api_data and api_data.get('res'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        extracted_info = {}
        for result in api_data['res'][:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            snippet = result.get('snippet', '')
            info = extract_cad_info(snippet)
            extracted_info.update(info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data[user_id].update(extracted_info)
        user_data[user_id]['serp_data'] = json.dumps(api_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        message = "‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:\n\n"
        if extracted_info.get('area'):
            message += f"üìê –ü–ª–æ—â–∞–¥—å: {extracted_info['area']} –º¬≤\n"
        if extracted_info.get('year'):
            message += f"üìÖ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {extracted_info['year']}\n"
        if extracted_info.get('price'):
            message += f"üí∞ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {extracted_info['price']:,.0f} —Ä—É–±.\n"
        
        if not extracted_info:
            message += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            message += "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º...\n"
        
        message += "\nüè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:"
        
        keyboard = [
            [InlineKeyboardButton("üè† –ñ–∏–ª–æ–µ", callback_data="room_type_–∂–∏–ª–æ–µ")],
            [InlineKeyboardButton("üè¢ –î—Ä—É–≥–æ–µ", callback_data="room_type_–¥—Ä—É–≥–æ–µ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        user_data[user_id]['step'] = 'waiting_room_type'
        
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üè† –ñ–∏–ª–æ–µ", callback_data="room_type_–∂–∏–ª–æ–µ")],
            [InlineKeyboardButton("üè¢ –î—Ä—É–≥–æ–µ", callback_data="room_type_–¥—Ä—É–≥–æ–µ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:", reply_markup=reply_markup)
        user_data[user_id]['step'] = 'waiting_room_type'

async def process_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    user_id = update.effective_user.id
    address = update.message.text.strip()
    
    user_data[user_id]['address'] = address
    user_data[user_id]['search_type'] = 'address'
    
    # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    await update.message.reply_text("üîç –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É...")
    
    api_data = search_cadastre_data(address, "address")
    
    if api_data and api_data.get('res'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        extracted_info = {}
        for result in api_data['res'][:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            snippet = result.get('snippet', '')
            info = extract_cad_info(snippet)
            extracted_info.update(info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data[user_id].update(extracted_info)
        user_data[user_id]['serp_data'] = json.dumps(api_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        message = "‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:\n\n"
        if extracted_info.get('area'):
            message += f"üìê –ü–ª–æ—â–∞–¥—å: {extracted_info['area']} –º¬≤\n"
        if extracted_info.get('year'):
            message += f"üìÖ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {extracted_info['year']}\n"
        if extracted_info.get('price'):
            message += f"üí∞ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {extracted_info['price']:,.0f} —Ä—É–±.\n"
        
        if not extracted_info:
            message += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            message += "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º...\n"
        
        message += "\nüè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:"
        
        keyboard = [
            [InlineKeyboardButton("üè† –ñ–∏–ª–æ–µ", callback_data="room_type_–∂–∏–ª–æ–µ")],
            [InlineKeyboardButton("üè¢ –î—Ä—É–≥–æ–µ", callback_data="room_type_–¥—Ä—É–≥–æ–µ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        user_data[user_id]['step'] = 'waiting_room_type'
        
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üè† –ñ–∏–ª–æ–µ", callback_data="room_type_–∂–∏–ª–æ–µ")],
            [InlineKeyboardButton("üè¢ –î—Ä—É–≥–æ–µ", callback_data="room_type_–¥—Ä—É–≥–æ–µ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:", reply_markup=reply_markup)
        user_data[user_id]['step'] = 'waiting_room_type'

async def process_room_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    room_type = query.data.split('_')[-1]
    user_data[user_id]['room_type'] = room_type
    user_data[user_id]['step'] = 'waiting_area'
    
    await query.edit_message_text(
        "üìê –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö:\n\n"
        "–ü—Ä–∏–º–µ—Ä: 2000"
    )

async def process_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–æ—â–∞–¥–∏"""
    user_id = update.effective_user.id
    
    try:
        area = float(update.message.text.replace(',', '.'))
        if area <= 0:
            raise ValueError()
        
        user_data[user_id]['area'] = area
        user_data[user_id]['step'] = 'waiting_build_year'
        
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1955"
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–æ—â–∞–¥–∏.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.\n"
            "–ü—Ä–∏–º–µ—Ä: 2000"
        )

async def process_build_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
    user_id = update.effective_user.id
    
    try:
        year = int(update.message.text)
        if year < 1800 or year > 2025:
            raise ValueError()
        
        user_data[user_id]['build_year'] = year
        user_data[user_id]['year_source'] = 'user_input'
        user_data[user_id]['step'] = 'waiting_materials'
        
        await update.message.reply_text(
            "üß± –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üß± –ö–∏—Ä–ø–∏—á", callback_data="material_–∫–∏—Ä–ø–∏—á")],
            [InlineKeyboardButton("üèóÔ∏è –ë–µ—Ç–æ–Ω", callback_data="material_–±–µ—Ç–æ–Ω")],
            [InlineKeyboardButton("üè¢ –ú–æ–Ω–æ–ª–∏—Ç", callback_data="material_–º–æ–Ω–æ–ª–∏—Ç")],
            [InlineKeyboardButton("üå≤ –î–µ—Ä–µ–≤–æ", callback_data="material_–¥–µ—Ä–µ–≤–æ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üß± –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:", reply_markup=reply_markup)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1955)"
        )

async def process_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    materials = query.data.split('_')[-1]
    user_data[user_id]['materials'] = materials
    user_data[user_id]['step'] = 'waiting_urgent'
    
    await query.edit_message_text(
        "‚è∞ –ù—É–∂–Ω–∞ –ª–∏ —Å—Ä–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞?\n\n"
        "–°—Ä–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (+20% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –¥–Ω–µ–π."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ö° –°—Ä–æ—á–Ω–æ", callback_data="urgent_yes")],
        [InlineKeyboardButton("üìÖ –ù–µ —Å—Ä–æ—á–Ω–æ", callback_data="urgent_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚è∞ –ù—É–∂–Ω–∞ –ª–∏ —Å—Ä–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞?\n\n"
        "–°—Ä–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (+20% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –¥–Ω–µ–π.",
        reply_markup=reply_markup
    )

async def process_urgent_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    is_urgent = query.data == 'urgent_yes'
    user_data[user_id]['is_urgent'] = is_urgent
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = user_data.get(user_id, {})
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–¢–ò
    calculation = calculate_bti_cost(
        data.get('area', 0),
        data.get('build_year', 2000),
        data.get('materials', '–∫–∏—Ä–ø–∏—á'),
        data.get('room_type', '–¥—Ä—É–≥–æ–µ'),
        is_urgent
    )
    
    if not calculation:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω –ø–æ –ø–∞–∫–µ—Ç–∞–º
    package_prices = calculate_package_prices(calculation['c_bti'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message = "üìä **–†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ë–¢–ò**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    message += f"üè† **–û–±—ä–µ–∫—Ç:**\n"
    message += f"üìç –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    message += f"üî¢ –ö–∞–¥–∞—Å—Ç—Ä: {data.get('cadastral_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    message += f"üìê –ü–ª–æ—â–∞–¥—å: {data.get('area', 0):.1f} –º¬≤\n"
    message += f"üìÖ –ì–æ–¥: {data.get('build_year', 2000)}\n"
    message += f"üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {data.get('materials', '–∫–∏—Ä–ø–∏—á')}\n"
    message += f"üè¢ –¢–∏–ø: {data.get('room_type', '–¥—Ä—É–≥–æ–µ')}\n\n"
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞
    message += f"üí∞ **–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:** {calculation['c_base']:,.0f} —Ä—É–±/–º¬≤\n"
    message += f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫: {calculation['c_base_source']}\n"
    message += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {calculation['c_base_note']}\n\n"
    
    message += f"üìä **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:**\n"
    message += f"‚Ä¢ {calculation['area_detail']}\n"
    message += f"‚Ä¢ {calculation['year_detail']}\n"
    message += f"‚Ä¢ {calculation['material_detail']}\n"
    message += f"‚Ä¢ {calculation['urgent_detail']}\n"
    message += f"‚Ä¢ –û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {calculation['total_coeff']:.3f}\n\n"
    
    message += f"üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ë–¢–ò:** {calculation['c_bti']:,.0f} —Ä—É–±.\n\n"
    
    # –¶–µ–Ω—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º
    message += f"üì¶ **–ü–ê–ö–ï–¢–´ –£–°–õ–£–ì:**\n"
    message += f"üåê –û–Ω–ª–∞–π–Ω-–æ—Ü–µ–Ω–∫–∞: {package_prices['online']:,.0f} —Ä—É–±.\n"
    message += f"üìã –ü–ª–∞–Ω –ë–¢–ò: {package_prices['plan']:,.0f} —Ä—É–±.\n"
    message += f"üöó –í—ã–µ–∑–¥ –º–∞—Å—Ç–µ—Ä–∞: {package_prices['on_site']:,.0f} —Ä—É–±.\n"
    message += f"üìÑ –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: {package_prices['full_package']:,.0f} —Ä—É–±.\n\n"
    
    message += "‚ö†Ô∏è *–≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ë–¢–ò.*"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db.add_measurement(
            user_id=user_id,
            address=data.get('address', ''),
            room_type=data.get('room_type', '–¥—Ä—É–≥–æ–µ'),
            area=data.get('area', 0),
            build_year=data.get('build_year', 2000),
            materials=data.get('materials', '–∫–∏—Ä–ø–∏—á'),
            cadastral_number=data.get('cadastral_number'),
            market_price=data.get('price'),
            serp_data=data.get('serp_data'),
            search_type=data.get('search_type'),
            bti_cost=calculation['c_bti'],
            c_base=calculation['c_base'],
            c_base_source=calculation['c_base_source'],
            c_base_note=calculation['c_base_note'],
            year_source=data.get('year_source'),
            s_itog=calculation['s_itog'],
            k_region=calculation['k_region'],
            k_iznos=calculation['k_iznos'],
            k_nazn=calculation['k_nazn'],
            k_dop=calculation['k_dop'],
            total_coefficient=calculation['total_coeff'],
            price_online=package_prices['online'],
            price_plan=package_prices['plan'],
            price_on_site=package_prices['on_site'],
            price_full_package=package_prices['full_package']
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
    
    await query.edit_message_text(message, parse_mode='Markdown')

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìû **–ö–û–ù–¢–ê–ö–¢–´**\n\n"
        "üè¢ –ë–¢–ò –ú–æ—Å–∫–≤—ã\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        "üåê –°–∞–π—Ç: www.bti-moscow.ru\n"
        "üìç –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –ú–æ—Å–∫–≤–∞\n\n"
        "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–ü—Ç: 9:00 - 18:00\n"
        "–°–±: 10:00 - 15:00\n"
        "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    logger.info(f"msg from {user_id}: '{text}'")
    logger.info(f"current step for {user_id}: {user_data.get(user_id, {}).get('step', 'main_menu')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
    if re.match(r'\d{2}:\d{2}:\d{7}:\d{4}', text):
        logger.info(f"üî¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {text}")
        user_data[user_id] = {'step': 'waiting_cadastral', 'cadastral_number': text, 'search_type': 'cadastral'}
        await process_cadastral_number(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —à–∞–≥–∞–º
    if user_id not in user_data:
        user_data[user_id] = {'step': 'main_menu'}
    
    step = user_data[user_id]['step']
    
    if step == 'waiting_area':
        await process_area(update, context)
    elif step == 'waiting_build_year':
        await process_build_year(update, context)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìè –ë–¢–ò —Ä–∞—Å—á—ë—Ç", callback_data="order_measurement")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.warning(f'Update {update} caused error {context.error}')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ë–¢–ò!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(order_measurement, pattern="^order_measurement$"))
    app.add_handler(CallbackQueryHandler(process_search_type, pattern="^search_"))
    app.add_handler(CallbackQueryHandler(process_room_type, pattern="^room_type_"))
    app.add_handler(CallbackQueryHandler(process_materials, pattern="^material_"))
    app.add_handler(CallbackQueryHandler(process_urgent_option, pattern="^urgent_"))
    app.add_handler(CallbackQueryHandler(show_contacts, pattern="^show_contacts$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()


# Flask webhook –¥–ª—è Cloud Run
from flask import Flask, request, jsonify
import os

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(os.environ.get('BOT_TOKEN')).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(process_search_type))
    
    logger.info('üöÄ BTI Bot –∑–∞–ø—É—â–µ–Ω!')
    
    # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º polling, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook

@app.route('/health', methods=['GET'])
def health():
    return jsonify({'status': 'ok'}), 200

@app.route('/', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Cloud Run"""
    try:
        # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        global application
        if application is None:
            logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BTI Bot –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ...')
            main()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if application is None:
            logger.error('Application not initialized')
            return jsonify({"error": "Application not initialized"}), 500
            
        update = Update.de_json(request.get_json(), application.bot)
        application.process_update(update)
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    logger.info(f'üöÄ –ó–∞–ø—É—Å–∫ BTI Bot –Ω–∞ –ø–æ—Ä—Ç—É {port}')
    app.run(host='0.0.0.0', port=port, debug=False)
