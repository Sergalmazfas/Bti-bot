#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

# –£—Å–ª—É–≥–∏ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
DRAWING_SERVICES = {
    "technical_drawings": {
        "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç–µ–∂–∏",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π –ø–æ –æ–±–º–µ—Ä–∞–º",
        "price_per_m2": 150,
        "min_price": 15000,
        "delivery_days": 5
    },
    "as_built_drawings": {
        "name": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏",
        "description": "–ß–µ—Ä—Ç–µ–∂–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞",
        "price_per_m2": 200,
        "min_price": 20000,
        "delivery_days": 7
    },
    "bim_model": {
        "name": "BIM-–º–æ–¥–µ–ª—å",
        "description": "3D –º–æ–¥–µ–ª—å –æ–±—ä–µ–∫—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π",
        "price_per_m2": 300,
        "min_price": 30000,
        "delivery_days": 10
    },
    "corrections": {
        "name": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        "description": "–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        "price_per_m2": 100,
        "min_price": 10000,
        "delivery_days": 3
    }
}

def calculate_drawing_price(service_type: str, area: float):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    if service_type not in DRAWING_SERVICES:
        return {"error": "Unknown service type"}
    
    service = DRAWING_SERVICES[service_type]
    price_per_m2 = service["price_per_m2"]
    min_price = service["min_price"]
    
    calculated_price = area * price_per_m2
    final_price = max(calculated_price, min_price)
    
    return {
        "service_name": service["name"],
        "description": service["description"],
        "area": area,
        "price_per_m2": price_per_m2,
        "calculated_price": calculated_price,
        "final_price": final_price,
        "delivery_days": service["delivery_days"],
        "savings": max(0, calculated_price - final_price) if calculated_price > min_price else 0
    }

def get_drawing_services_summary():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    summary = "üé® **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:**\n\n"
    
    for service_id, service in DRAWING_SERVICES.items():
        summary += f"‚Ä¢ **{service['name']}** - {service['description']}\n"
        summary += f"  üí∞ {service['price_per_m2']} ‚ÇΩ/–º¬≤, ‚è±Ô∏è {service['delivery_days']} –¥–Ω–µ–π\n\n"
    
    return summary

def test_drawing_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–µ–π
    test_areas = [50, 100, 200, 500]
    
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–µ–π:")
    for area in test_areas:
        print(f"\n   üìê –ü–ª–æ—â–∞–¥—å: {area} –º¬≤")
        for service_type in DRAWING_SERVICES.keys():
            price_info = calculate_drawing_price(service_type, area)
            print(f"   ‚Ä¢ {price_info['service_name']}: {price_info['final_price']:,.0f} ‚ÇΩ")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥:")
    summary = get_drawing_services_summary()
    print(summary)
    
    # –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ (BIM-–º–æ–¥–µ–ª—å, 150 –º¬≤):")
    price_info = calculate_drawing_price("bim_model", 150)
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {price_info['service_name']}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {price_info['description']}")
    print(f"   –ü–ª–æ—â–∞–¥—å: {price_info['area']} –º¬≤")
    print(f"   –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_info['price_per_m2']} ‚ÇΩ")
    print(f"   –†–∞—Å—á–µ—Ç: {price_info['calculated_price']:,.0f} ‚ÇΩ")
    print(f"   –ò—Ç–æ–≥–æ: {price_info['final_price']:,.0f} ‚ÇΩ")
    print(f"   –°—Ä–æ–∫: {price_info['delivery_days']} –¥–Ω–µ–π")
    if price_info['savings'] > 0:
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {price_info['savings']:,.0f} ‚ÇΩ")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("\nüìã –ì–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   ‚Ä¢ calculate_drawing_price() - —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    print("   ‚Ä¢ get_drawing_services_summary() - –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥")
    print("   ‚Ä¢ DRAWING_SERVICES - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥")
    
    print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç")
    print("   2. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ Telegram")
    print("   3. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–∞–∑–æ–≤")
    print("   4. –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    test_drawing_services()
