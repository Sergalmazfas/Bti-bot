"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import logging
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

# –£—Å–ª—É–≥–∏ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
DRAWING_SERVICES = {
    "technical_drawings": {
        "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç–µ–∂–∏",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π –ø–æ –æ–±–º–µ—Ä–∞–º",
        "price_per_m2": 150,
        "min_price": 15000,
        "delivery_days": 5
    },
    "as_built_drawings": {
        "name": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏",
        "description": "–ß–µ—Ä—Ç–µ–∂–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞",
        "price_per_m2": 200,
        "min_price": 20000,
        "delivery_days": 7
    },
    "bim_model": {
        "name": "BIM-–º–æ–¥–µ–ª—å",
        "description": "3D –º–æ–¥–µ–ª—å –æ–±—ä–µ–∫—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π",
        "price_per_m2": 300,
        "min_price": 30000,
        "delivery_days": 10
    },
    "corrections": {
        "name": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        "description": "–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        "price_per_m2": 100,
        "min_price": 10000,
        "delivery_days": 3
    }
}

def calculate_drawing_price(service_type: str, area: float) -> Dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    if service_type not in DRAWING_SERVICES:
        return {"error": "Unknown service type"}
    
    service = DRAWING_SERVICES[service_type]
    price_per_m2 = service["price_per_m2"]
    min_price = service["min_price"]
    
    calculated_price = area * price_per_m2
    final_price = max(calculated_price, min_price)
    
    return {
        "service_name": service["name"],
        "description": service["description"],
        "area": area,
        "price_per_m2": price_per_m2,
        "calculated_price": calculated_price,
        "final_price": final_price,
        "delivery_days": service["delivery_days"],
        "savings": max(0, calculated_price - final_price) if calculated_price > min_price else 0
    }

def create_drawing_services_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
    for service_id, service in DRAWING_SERVICES.items():
        button_text = f"üìê {service['name']}"
        callback_data = f"drawing_{service_id}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —É—Å–ª—É–≥–∏"
    keyboard.append([InlineKeyboardButton("üìã –í—Å–µ —É—Å–ª—É–≥–∏", callback_data="drawing_all")])
    
    return InlineKeyboardMarkup(keyboard)

async def send_drawing_services_offer(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     address: str, area: float, room_type: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    
    message = (
        "üé® **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏**\n\n"
        f"üìç **–û–±—ä–µ–∫—Ç:** {address}\n"
        f"üìê **–ü–ª–æ—â–∞–¥—å:** {area} –º¬≤\n"
        f"üè¢ **–¢–∏–ø:** {room_type}\n\n"
        "**–ú—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:**\n\n"
        "üìê **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç–µ–∂–∏** - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π –ø–æ –æ–±–º–µ—Ä–∞–º\n"
        "üìã **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏** - —á–µ—Ä—Ç–µ–∂–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        "üèóÔ∏è **BIM-–º–æ–¥–µ–ª—å** - 3D –º–æ–¥–µ–ª—å –æ–±—ä–µ–∫—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π\n"
        "‚úèÔ∏è **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è** - –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é\n\n"
        "üí° **–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**"
    )
    
    keyboard = create_drawing_services_keyboard()
    await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def handle_drawing_service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = query.from_user.id
    
    if callback_data.startswith("drawing_"):
        service_type = callback_data.replace("drawing_", "")
        
        if service_type == "all":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
            await show_all_drawing_services(query, context)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É
            await show_specific_drawing_service(query, context, service_type)

async def show_all_drawing_services(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    area = 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ user_data
    
    message = "üìã **–í—Å–µ —É—Å–ª—É–≥–∏ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º:**\n\n"
    
    for service_id, service in DRAWING_SERVICES.items():
        price_info = calculate_drawing_price(service_id, area)
        
        message += (
            f"**{service['name']}**\n"
            f"üìù {service['description']}\n"
            f"üí∞ {price_info['price_per_m2']} ‚ÇΩ/–º¬≤\n"
            f"‚è±Ô∏è –°—Ä–æ–∫: {service['delivery_days']} –¥–Ω–µ–π\n"
            f"üíµ –ò—Ç–æ–≥–æ: {price_info['final_price']:,.0f} ‚ÇΩ\n\n"
        )
    
    message += "üí° **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:**"
    
    keyboard = create_drawing_services_keyboard()
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_specific_drawing_service(query, context: ContextTypes.DEFAULT_TYPE, service_type: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    
    if service_type not in DRAWING_SERVICES:
        await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—â–∞–¥—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    area = 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    service = DRAWING_SERVICES[service_type]
    price_info = calculate_drawing_price(service_type, area)
    
    message = (
        f"üìê **{service['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {service['description']}\n"
        f"üìê **–ü–ª–æ—â–∞–¥—å:** {area} –º¬≤\n"
        f"üí∞ **–¶–µ–Ω–∞ –∑–∞ –º¬≤:** {price_info['price_per_m2']} ‚ÇΩ\n"
        f"üßÆ **–†–∞—Å—á–µ—Ç:** {area} √ó {price_info['price_per_m2']} = {price_info['calculated_price']:,.0f} ‚ÇΩ\n"
        f"üíµ **–ò—Ç–æ–≥–æ:** {price_info['final_price']:,.0f} ‚ÇΩ\n"
        f"‚è±Ô∏è **–°—Ä–æ–∫:** {service['delivery_days']} –¥–Ω–µ–π\n\n"
    )
    
    if price_info['savings'] > 0:
        message += f"üéâ **–≠–∫–æ–Ω–æ–º–∏—è:** {price_info['savings']:,.0f} ‚ÇΩ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞)\n\n"
    
    message += (
        "üìû **–î–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏:**\n"
        "‚Ä¢ Email: sales@zamerpro.ru\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 000-00-00\n"
        "‚Ä¢ Telegram: @zamerpro_support\n\n"
        "üíº **–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å–ª—É–≥—É:**\n"
        "‚Ä¢ –í—ã–µ–∑–¥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
        "‚Ä¢ –û–±–º–µ—Ä—ã –∏ —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–µ–π –≤ AutoCAD\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞\n"
        "‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö DWG, PDF"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="drawing_all")],
        [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{service_type}")]
    ])
    
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

def get_drawing_services_summary() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    summary = "üé® **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:**\n\n"
    
    for service_id, service in DRAWING_SERVICES.items():
        summary += f"‚Ä¢ **{service['name']}** - {service['description']}\n"
        summary += f"  üí∞ {service['price_per_m2']} ‚ÇΩ/–º¬≤, ‚è±Ô∏è {service['delivery_days']} –¥–Ω–µ–π\n\n"
    
    return summary

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_drawing_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ª—É–≥ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω:")
    for service_type in DRAWING_SERVICES.keys():
        price_info = calculate_drawing_price(service_type, 100)
        print(f"   {service_type}: {price_info['final_price']:,.0f} ‚ÇΩ")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥:")
    summary = get_drawing_services_summary()
    print(summary)
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")

if __name__ == "__main__":
    test_drawing_services()
