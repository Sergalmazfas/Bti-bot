#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Forge 3D ‚Üí 2D API
"""

import requests
import json
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://forge-3d-to-2d-swiftchair.us-central1.run.app"
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: BASE_URL = "http://localhost:8080"

def test_health():
    """–¢–µ—Å—Ç health check"""
    print("üîç Testing health endpoint...")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        print(f"Status: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False

def test_status():
    """–¢–µ—Å—Ç status endpoint"""
    print("\nüìä Testing status endpoint...")
    try:
        response = requests.get(f"{BASE_URL}/status", timeout=10)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Status check failed: {e}")
        return False

def test_upload_no_file():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ —Ñ–∞–π–ª–∞"""
    print("\nüö´ Testing upload without file...")
    try:
        response = requests.post(f"{BASE_URL}/upload", timeout=10)
        print(f"Status: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 400
    except Exception as e:
        print(f"‚ùå Upload test failed: {e}")
        return False

def test_upload_invalid_file():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüìÅ Testing upload with invalid file...")
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        with open("test.txt", "w") as f:
            f.write("This is not an IFC file")
        
        with open("test.txt", "rb") as f:
            files = {"file": ("test.txt", f, "text/plain")}
            response = requests.post(f"{BASE_URL}/upload", files=files, timeout=30)
        
        print(f"Status: {response.status_code}")
        print(f"Response: {response.json()}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove("test.txt")
        return response.status_code == 400
    except Exception as e:
        print(f"‚ùå Invalid file test failed: {e}")
        return False

def test_upload_valid_file():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ IFC —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
    print("\nüèóÔ∏è Testing upload with valid IFC file...")
    
    # –ò—â–µ–º IFC —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ifc_files = list(Path(".").glob("*.ifc"))
    if not ifc_files:
        print("‚ö†Ô∏è No IFC files found for testing")
        return True
    
    ifc_file = ifc_files[0]
    print(f"Using IFC file: {ifc_file}")
    
    try:
        with open(ifc_file, "rb") as f:
            files = {"file": (ifc_file.name, f, "application/octet-stream")}
            response = requests.post(f"{BASE_URL}/upload", files=files, timeout=300)  # 5 –º–∏–Ω—É—Ç timeout
        
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print(f"‚úÖ File processed successfully!")
                print(f"üìÅ GCS URL: {result.get('gcs_url')}")
                return True
        
        return False
    except Exception as e:
        print(f"‚ùå Valid file test failed: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ Starting Forge 3D ‚Üí 2D API Tests")
    print("=" * 50)
    
    tests = [
        ("Health Check", test_health),
        ("Status Check", test_status),
        ("Upload No File", test_upload_no_file),
        ("Upload Invalid File", test_upload_invalid_file),
        ("Upload Valid File", test_upload_valid_file),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
            print(f"{'‚úÖ PASSED' if result else '‚ùå FAILED'}: {test_name}")
        except Exception as e:
            print(f"‚ùå ERROR in {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "="*50)
    print("üìä Test Results Summary:")
    print("="*50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status}: {test_name}")
    
    print(f"\nüéØ Overall: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed!")
    else:
        print("‚ö†Ô∏è Some tests failed. Check the output above.")

if __name__ == "__main__":
    main()
