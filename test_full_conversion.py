#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 3D ‚Üí 2D —á–µ—Ä–µ–∑ Forge API
"""

import requests
import json
import time
import os

def test_forge_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ IFC ‚Üí DWG/PDF"""
    
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 3D ‚Üí 2D")
    print("=" * 50)
    
    # URL —Å–µ—Ä–≤–∏—Å–∞
    base_url = "https://btibot-637190449180.europe-west1.run.app"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    test_file = "test_model.ifc"
    if not os.path.exists(test_file):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é create_test_ifc.py")
        return False
    
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(test_file)} –±–∞–π—Ç")
    
    # –®–∞–≥ 1: Health check
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –û—Ç–≤–µ—Ç: {response.json()}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    # –®–∞–≥ 2: Status check
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
    try:
        response = requests.get(f"{base_url}/status", timeout=10)
        if response.status_code == 200:
            status = response.json()
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
            print(f"   üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {status.get('supported_formats', [])}")
            print(f"   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {status.get('max_file_size_mb', 0)} MB")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ IFC —Ñ–∞–π–ª–∞...")
    try:
        with open(test_file, 'rb') as f:
            files = {"file": (test_file, f, "application/octet-stream")}
            print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {test_file}...")
            
            start_time = time.time()
            response = requests.post(f"{base_url}/upload", files=files, timeout=300)  # 5 –º–∏–Ω—É—Ç timeout
            upload_time = time.time() - start_time
            
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {upload_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print("   ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                
                if result.get('success'):
                    gcs_url = result.get('gcs_url')
                    if gcs_url:
                        print(f"\nüéâ –£–°–ü–ï–•! –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {gcs_url}")
                        print(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {gcs_url}")
                        
                        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                        print(f"   üìÅ GCS URL: {gcs_url}")
                        print(f"   üìè –§–æ—Ä–º–∞—Ç: {result.get('file_info', {}).get('format', 'Unknown')}")
                        print(f"   üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {result.get('file_info', {}).get('file_size', 0)} –±–∞–π—Ç")
                        
                        return True
                    else:
                        print("   ‚ùå GCS URL –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                        return False
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('message', 'Unknown error')}")
                    return False
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                except:
                    print(f"   üìä –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    print("=" * 40)
    
    base_url = "https://btibot-637190449180.europe-west1.run.app"
    
    endpoints = [
        ("GET", "/health", "Health check"),
        ("GET", "/status", "Service status"),
        ("POST", "/upload", "File upload (requires file)")
    ]
    
    for method, endpoint, description in endpoints:
        print(f"\nüì° {method} {endpoint} - {description}")
        try:
            if method == "GET":
                response = requests.get(f"{base_url}{endpoint}", timeout=10)
            else:
                response = requests.post(f"{base_url}{endpoint}", timeout=10)
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                try:
                    data = response.json()
                    print(f"   üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
                except:
                    print(f"   üìä –¢–µ–∫—Å—Ç: {response.text[:200]}...")
            else:
                print("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è POST –±–µ–∑ —Ñ–∞–π–ª–∞)")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 3D ‚Üí 2D")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    test_api_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    success = test_forge_conversion()
    
    print("\n" + "=" * 60)
    if success:
        print("ÔøΩÔøΩ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ IFC —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ DWG/PDF")
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Cloud Storage")
        print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∞")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –°–∫–∞—á–∞–π—Ç–µ DWG/PDF —Ñ–∞–π–ª")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 2D —á–µ—Ä—Ç–µ–∂–∞")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ü—Ä–æ–±–ª–µ–º—ã —Å Forge API")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã")
        print("3. –û—à–∏–±–∫–∏ –≤ GCS")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å IFC —Ñ–∞–π–ª–æ–º")
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞:")
    print(f"   üåê –°–µ—Ä–≤–∏—Å: https://btibot-637190449180.europe-west1.run.app")
    print(f"   üìÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: test_model.ifc")
    print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: DWG/PDF —á–µ—Ä—Ç–µ–∂")

if __name__ == "__main__":
    main()
