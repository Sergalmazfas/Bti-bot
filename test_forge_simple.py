#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Forge API —á–µ—Ä–µ–∑ curl
"""

import subprocess
import json
import os

def test_forge_with_curl():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Forge API —á–µ—Ä–µ–∑ curl"""
    
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Forge API —á–µ—Ä–µ–∑ curl")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
        client_id = subprocess.run([
            'gcloud', 'secrets', 'versions', 'access', 'latest', 
            '--secret=ForgeClientID', '--project=talkhint'
        ], capture_output=True, text=True).stdout.strip()
        
        client_secret = subprocess.run([
            'gcloud', 'secrets', 'versions', 'access', 'latest', 
            '--secret=ForgeClientSecret', '--project=talkhint'
        ], capture_output=True, text=True).stdout.strip()
        
        print(f"‚úÖ Client ID: {client_id[:10]}...")
        print(f"‚úÖ Client Secret: {client_secret[:10]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        print("\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        curl_cmd = [
            'curl', '-s', '-X', 'POST',
            'https://developer.api.autodesk.com/authentication/v2/token',
            '-d', f'client_id={client_id}',
            '-d', f'client_secret={client_secret}',
            '-d', 'grant_type=client_credentials',
            '-d', 'scope=data:read data:write data:create bucket:create bucket:read'
        ]
        
        result = subprocess.run(curl_cmd, capture_output=True, text=True, timeout=30)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.returncode}")
        
        if result.returncode == 0:
            try:
                token_data = json.loads(result.stdout)
                access_token = token_data.get('access_token')
                expires_in = token_data.get('expires_in')
                
                print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print(f"üîë Token: {access_token[:20]}...")
                print(f"‚è∞ –°—Ä–æ–∫: {expires_in} —Å–µ–∫")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º OSS API
                print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OSS API...")
                
                oss_cmd = [
                    'curl', '-s', '-H', f'Authorization: Bearer {access_token}',
                    'https://developer.api.autodesk.com/oss/v2/buckets'
                ]
                
                oss_result = subprocess.run(oss_cmd, capture_output=True, text=True, timeout=30)
                print(f"üìä OSS —Å—Ç–∞—Ç—É—Å: {oss_result.returncode}")
                
                if oss_result.returncode == 0:
                    print("‚úÖ OSS API –¥–æ—Å—Ç—É–ø–µ–Ω!")
                    try:
                        oss_data = json.loads(oss_result.stdout)
                        items = oss_data.get('items', [])
                        print(f"üì¶ Buckets: {len(items)}")
                    except:
                        print("üì¶ OSS –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                else:
                    print(f"‚ùå OSS –æ—à–∏–±–∫–∞: {oss_result.stderr}")
                
                return True
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
                print(f"üìù –û—Ç–≤–µ—Ç: {result.stdout}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ curl: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_gcs_bucket():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç GCS bucket"""
    
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ GCS bucket")
    print("=" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket
        result = subprocess.run([
            'gsutil', 'ls', 'gs://btibot-processed'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Bucket btibot-processed —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        else:
            print("‚ö†Ô∏è Bucket –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
            
            create_result = subprocess.run([
                'gsutil', 'mb', '-l', 'europe-west1', 'gs://btibot-processed'
            ], capture_output=True, text=True)
            
            if create_result.returncode == 0:
                print("‚úÖ Bucket —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {create_result.stderr}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GCS: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Forge API –∏ GCS")
    print("=" * 40)
    
    # –¢–µ—Å—Ç Forge API
    forge_ok = test_forge_with_curl()
    
    # –¢–µ—Å—Ç GCS
    gcs_ok = test_gcs_bucket()
    
    print("\n" + "=" * 40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üîê Forge API: {'‚úÖ OK' if forge_ok else '‚ùå FAIL'}")
    print(f"üóÑÔ∏è GCS: {'‚úÖ OK' if gcs_ok else '‚ùå FAIL'}")
    
    if forge_ok and gcs_ok:
        print("\nüéâ –í–°–ï –ì–û–¢–û–í–û!")
        print("‚úÖ Forge API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ GCS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
        if not forge_ok:
            print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Forge credentials")
        if not gcs_ok:
            print("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GCS bucket")

if __name__ == "__main__":
    main()
