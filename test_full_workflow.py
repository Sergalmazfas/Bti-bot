#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 3D ‚Üí 2D
"""

import os
import sys
import time
import json

def test_with_curl():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å –ø–æ–º–æ—â—å—é curl (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)"""
    
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 3D ‚Üí 2D")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_file = "test_model.ifc"
    if not os.path.exists(test_file):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é: python3 create_test_ifc.py")
        return False
    
    print(f"ÔøΩÔøΩ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(test_file)} –±–∞–π—Ç")
    
    base_url = "https://btibot-637190449180.europe-west1.run.app"
    
    # –®–∞–≥ 1: Health check
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        import subprocess
        result = subprocess.run(['curl', '-s', f'{base_url}/health'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("   ‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            health_data = json.loads(result.stdout)
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'Unknown')}")
            print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {health_data.get('message', 'Unknown')}")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –®–∞–≥ 2: Status check
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
    try:
        result = subprocess.run(['curl', '-s', f'{base_url}/status'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
            status_data = json.loads(result.stdout)
            print(f"   üìä –°–µ—Ä–≤–∏—Å: {status_data.get('service', 'Unknown')}")
            print(f"   üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {status_data.get('supported_formats', [])}")
            print(f"   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {status_data.get('max_file_size_mb', 0)} MB")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ IFC —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")
    try:
        print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {test_file}...")
        start_time = time.time()
        
        cmd = ['curl', '-s', '-X', 'POST', 
               '-F', f'file=@{test_file}',
               f'{base_url}/upload']
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        upload_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {upload_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {result.returncode}")
        
        if result.returncode == 0:
            try:
                response_data = json.loads(result.stdout)
                print(f"   üì§ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
                
                if response_data.get('success'):
                    print("\nüéâ –£–°–ü–ï–•! –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    gcs_url = response_data.get('gcs_url')
                    if gcs_url:
                        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {gcs_url}")
                        print(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {gcs_url}")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                        file_info = response_data.get('file_info', {})
                        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:")
                        print(f"   üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {file_info.get('original_filename', 'Unknown')}")
                        print(f"   üìè –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_info.get('file_size', 0)} –±–∞–π—Ç")
                        print(f"   üîÑ –§–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {file_info.get('format', 'Unknown')}")
                        
                        return True
                    else:
                        print("   ‚ùå GCS URL –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                        return False
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response_data.get('message', 'Unknown error')}")
                    return False
            except json.JSONDecodeError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   üì§ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {result.stdout}")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–æ–¥: {result.returncode})")
            print(f"   üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def show_test_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∞"""
    
    print("\nüìã –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∞:")
    print("=" * 40)
    
    print("üéØ –¶–µ–ª—å —Ç–µ—Å—Ç–∞:")
    print("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é IFC –º–æ–¥–µ–ª—å")
    print("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Forge API –≤ DWG/PDF")
    print("   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ GCS")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ 2D —á–µ—Ä—Ç–µ–∂–∞")
    
    print("\nüìÅ –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å:")
    print("   ‚Ä¢ –§–∞–π–ª: test_model.ifc")
    print("   ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–≤–∞—Ä—Ç–∏—Ä–∞ 50 –º¬≤, 2 –∫–æ–º–Ω–∞—Ç—ã, 1 —Å–∞–Ω—É–∑–µ–ª")
    print("   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç—ã: —Å—Ç–µ–Ω—ã, –æ–∫–Ω–∞, –¥–≤–µ—Ä–∏")
    print("   ‚Ä¢ –†–∞–∑–º–µ—Ä: 4.5 KB")
    
    print("\nüîÑ Workflow –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    print("   1. –ó–∞–≥—Ä—É–∑–∫–∞ IFC —Ñ–∞–π–ª–∞ –Ω–∞ Cloud Run")
    print("   2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ (.ifc, <100MB)")
    print("   3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Forge OSS bucket")
    print("   4. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è IFC ‚Üí DWG —á–µ—Ä–µ–∑ Model Derivative API")
    print("   5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ Forge")
    print("   6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS: gs://btibot-processed/processed/<–¥–∞—Ç–∞>/")
    print("   7. –í–æ–∑–≤—Ä–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    print("\n‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("   ‚Ä¢ DWG/PDF —Ñ–∞–π–ª —Å 2D —á–µ—Ä—Ç–µ–∂–æ–º")
    print("   ‚Ä¢ –ü–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏")
    print("   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–µ–Ω, –æ–∫–æ–Ω, –¥–≤–µ—Ä–µ–π")
    print("   ‚Ä¢ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ workflow –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 3D ‚Üí 2D")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    show_test_summary()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_with_curl()
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ IFC —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ DWG/PDF")
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Cloud Storage")
        print("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∞")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –°–∫–∞—á–∞–π—Ç–µ DWG/PDF —Ñ–∞–π–ª")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 2D —á–µ—Ä—Ç–µ–∂–∞")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ü—Ä–æ–±–ª–µ–º—ã —Å Forge API")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã")
        print("3. –û—à–∏–±–∫–∏ –≤ GCS")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å IFC —Ñ–∞–π–ª–æ–º")
        print("\nüìû –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Cloud Run")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ–∫—Ä–µ—Ç—ã Forge –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GCS")
    
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ:")
    print(f"   üåê –°–µ—Ä–≤–∏—Å: https://btibot-637190449180.europe-west1.run.app")
    print(f"   üìÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: test_model.ifc")
    print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: DWG/PDF —á–µ—Ä—Ç–µ–∂")

if __name__ == "__main__":
    main()
