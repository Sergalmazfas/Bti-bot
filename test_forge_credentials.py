#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Forge API credentials –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
"""

import requests
import json
import os
from google.cloud import secretmanager

def test_forge_authentication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Forge API"""
    
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Forge API credentials")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ Secret Manager
        client = secretmanager.SecretManagerServiceClient()
        project_id = "talkhint"
        
        # ForgeClientID
        name_id = f"projects/{project_id}/secrets/ForgeClientID/versions/latest"
        response_id = client.access_secret_version(request={"name": name_id})
        client_id = response_id.payload.data.decode("UTF-8")
        
        # ForgeClientSecret  
        name_secret = f"projects/{project_id}/secrets/ForgeClientSecret/versions/latest"
        response_secret = client.access_secret_version(request={"name": name_secret})
        client_secret = response_secret.payload.data.decode("UTF-8")
        
        print(f"‚úÖ Client ID –ø–æ–ª—É—á–µ–Ω: {client_id[:10]}...")
        print(f"‚úÖ Client Secret –ø–æ–ª—É—á–µ–Ω: {client_secret[:10]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        print("\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        url = "https://developer.api.autodesk.com/authentication/v2/token"
        data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': 'client_credentials',
            'scope': 'data:read data:write data:create bucket:create bucket:read'
        }
        
        response = requests.post(url, data=data, timeout=30)
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get('access_token')
            expires_in = token_data.get('expires_in')
            
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"üîë Access Token: {access_token[:20]}...")
            print(f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_in} —Å–µ–∫—É–Ω–¥")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ OSS API
            print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ OSS API...")
            
            headers = {'Authorization': f'Bearer {access_token}'}
            oss_url = "https://developer.api.autodesk.com/oss/v2/buckets"
            
            oss_response = requests.get(oss_url, headers=headers, timeout=30)
            print(f"üìä OSS API —Å—Ç–∞—Ç—É—Å: {oss_response.status_code}")
            
            if oss_response.status_code == 200:
                print("‚úÖ –î–æ—Å—Ç—É–ø –∫ OSS API —É—Å–ø–µ—à–µ–Ω!")
                buckets = oss_response.json()
                print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ buckets: {len(buckets.get('items', []))}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ OSS API: {oss_response.text}")
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Model Derivative API
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ Model Derivative API...")
            
            md_url = "https://developer.api.autodesk.com/modelderivative/v2/designdata"
            md_response = requests.get(md_url, headers=headers, timeout=30)
            print(f"üìä Model Derivative API —Å—Ç–∞—Ç—É—Å: {md_response.status_code}")
            
            if md_response.status_code in [200, 404]:  # 404 –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
                print("‚úÖ –î–æ—Å—Ç—É–ø –∫ Model Derivative API —É—Å–ø–µ—à–µ–Ω!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Model Derivative API: {md_response.text}")
                
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            print(f"üìù –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_gcs_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Google Cloud Storage"""
    
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Cloud Storage")
    print("=" * 50)
    
    try:
        from google.cloud import storage
        
        client = storage.Client()
        print("‚úÖ GCS –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket
        bucket_name = "btibot-processed"
        bucket = client.bucket(bucket_name)
        
        if bucket.exists():
            print(f"‚úÖ Bucket {bucket_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ö†Ô∏è Bucket {bucket_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
            try:
                bucket = client.create_bucket(bucket_name, location="europe-west1")
                print(f"‚úÖ Bucket {bucket_name} —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {e}")
                return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
        print("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
        blob_name = "test/test_file.txt"
        blob = bucket.blob(blob_name)
        
        test_content = "Test content for Forge integration"
        blob.upload_from_string(test_content, content_type='text/plain')
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: gs://{bucket_name}/{blob_name}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        blob.delete()
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GCS: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Forge API –∏ GCS")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: Forge API credentials
    forge_ok = test_forge_authentication()
    
    # –¢–µ—Å—Ç 2: GCS –¥–æ—Å—Ç—É–ø
    gcs_ok = test_gcs_access()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"ÔøΩÔøΩ Forge API: {'‚úÖ OK' if forge_ok else '‚ùå FAIL'}")
    print(f"üóÑÔ∏è GCS: {'‚úÖ OK' if gcs_ok else '‚ùå FAIL'}")
    
    if forge_ok and gcs_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Forge API credentials —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ GCS –¥–æ—Å—Ç—É–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´:")
        if not forge_ok:
            print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Forge API credentials")
            print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ Client ID –∏ Secret")
        if not gcs_ok:
            print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GCS")
            print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ bucket btibot-processed")

if __name__ == "__main__":
    main()
